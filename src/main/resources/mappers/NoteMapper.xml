<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.polo.apollo.dao.note.NoteDao">

    <select id="queryBlogPage" resultType="com.polo.apollo.entity.dto.NoteDto">
        select
        n.uid, n.create_dt, n.deleted, n.dir_id, n.name,  n.read_count, n.good,n.publish_dt,
        <choose>
            <when test="vo.abbre">
                left(n.content, 100) as content
            </when>
            <otherwise>
                n.content
            </otherwise>
        </choose>
        , c.name  as catalog_name
        from t_note n
        left join t_catalog c on c.uid = n.dir_id
        left join t_tag_note tn on tn.note_id = n.uid
        left join t_tag t on tn.tag_id = t.uid
        <where>
            <if test="vo.published != null">
                <choose>
                    <when test="vo.published">
                        and n.publish_dt is not null
                    </when>
                    <otherwise>
                        and n.publish_dt is null
                    </otherwise>
                </choose>
            </if>

            <if test='vo.tagName != null and vo.tagName != ""'>
                and t.name = #{vo.tagName}
            </if>
        </where>
        group by n.uid
    </select>

    <select id="queryDtoList" resultType="com.polo.apollo.entity.dto.CatalogDto">
        select
        n.dir_id, n.uid as id, n.name as text,
        'note' as type
        from t_note n
        where n.deleted = 0
        <if test='dirId != null and dirId !=""'>
            and n.dir_id = #{dirId}
        </if>
    </select>

    <select id="queryCatalogDto" resultType="com.polo.apollo.entity.dto.CatalogDto">
        select
        n.dir_id,
        n.uid as id,
        n.name as text,
        'note' as type
        from t_note n
        where n.deleted = 0 and n.uid = #{uid}
    </select>

    <select id="queryPublishedPreAndNext" resultType="com.polo.apollo.entity.dto.NoteDto">
        (SELECT uid, name, 'true' as isPre  FROM t_note WHERE uid != #{uid} and deleted = 0 and publish_dt is not null and #{publishDt} >= publish_dt ORDER BY publish_dt DESC LIMIT 1)
         UNION
        (SELECT uid, name, 'false' as isPre  FROM t_note WHERE uid != #{uid} and deleted = 0 and publish_dt is not null and publish_dt >= #{publishDt} ORDER BY publish_dt ASC LIMIT 1)
    </select>

    <update id="addRead">
        update t_note set read_count = read_count + 1 where uid = #{uid}
    </update>

    <update id="addGood">
        update t_note set good = good + 1 where uid = #{uid}
    </update>

</mapper>
