<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.polo.apollo.dao.blog.BlogDao">

    <select id="queryBlogPage" resultType="com.polo.apollo.entity.dto.BlogDto">
        SELECT
        b.*,
        left(n.content, 200) as content,
        n.NAME,
        n.dir_id,
        c.name as dir_name,
        GROUP_CONCAT(t.name) as tag_names
        FROM
        t_blog b
        left join t_note n on b.note_id = n.uid
        left join t_catalog c on c.uid = n.dir_id
        left join t_tag_note nt on nt.note_id = n.uid
        left join t_tag t on nt.tag_id = t.uid
        WHERE
        b.deleted = 0
        <if test='vo.name != null and vo.name != ""'>
            and n.NAME like concat(#{vo.name}, '%')
        </if>
        <if test='vo.tagName != null and vo.tagName != ""'>
            and t.name = #{vo.tagName}
        </if>
        <if test='vo.dirName != null and vo.dirName != ""'>
            and c.name like concat('%', #{vo.dirName}, '%')
        </if>
        <if test='vo.content != null and vo.content != ""'>
            and n.content like concat('%', #{vo.content}, '%')
        </if>
        GROUP BY b.uid
        order by b.create_dt desc
    </select>

    <select id="queryBlogById" resultType="com.polo.apollo.entity.dto.BlogDto">
        SELECT
            b.*,
            n.dir_id,
            n.content as content,
            c.name as dir_name,
            n.NAME
        FROM
            t_blog b,
            t_note n,
            t_catalog c
        WHERE
            b.note_id = n.uid
            AND c.uid = n.dir_id
            AND b.deleted = 0
            and b.uid = #{uid}
    </select>

    <select id="queryHotBlog" resultType="com.polo.apollo.entity.dto.BlogHotDto">
        select n.name, b.uid, b.good, b.create_dt, b.read_count
        from t_blog b, t_note n
        where b.note_id = n.uid and b.deleted = 0
        order by b.read_count desc, b.create_dt desc
        limit #{top}
    </select>

    <select id="queryPreAndNextBlog" resultType="com.polo.apollo.entity.dto.BlogDto">
        select b.uid, n.name, isPre from (
            (SELECT uid, note_id, 'true' as isPre  FROM t_blog WHERE uid != #{uid} and deleted = 0 and #{date} >= create_dt ORDER BY create_dt DESC LIMIT 1)
            UNION
            (SELECT uid, note_id, 'false' as isPre  FROM t_blog WHERE uid != #{uid} and deleted = 0 and create_dt >= #{date} ORDER BY create_dt ASC LIMIT 1)
        )  b, t_note n where b.note_id = n.uid
     </select>
</mapper>
